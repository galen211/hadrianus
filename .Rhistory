install.packages("gganimate")
library(devtools)
devtools::install_github("thomasp85/gganimate")
shiny::runApp()
packages.used = c("readxl", "tidyr", "ggplot2", "stringr","clipr","knitr","readr","dplyr","lubridate")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
output <- lapply(packages.used, require, character.only = TRUE)
assertthat::assert_that(all(output)) #  all code libraries are correctly loaded
?seq
start_date <- ymd("20140101")
end_date <- ymd("20190101")
average_terms <- 30
num_invoices_per_day <- 100
company_codes <- seq(1010, 4350, by = 10)
seq(from = start_date, to = end_date, by = 1)
?add_row
?rbinom
packages.used = c("readxl", "tidyr", "ggplot2", "stringr","clipr","knitr","readr","dplyr","lubridate")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
output <- lapply(packages.used, require, character.only = TRUE)
assertthat::assert_that(all(output)) #  all code libraries are correctly loaded
x <- map(1:3, ~ runif(2))
library(purrr)
x <- map(1:3, ~ runif(2))
x
as_mapper(~ length(unique(.x)))
mtcars
mtcars %>% summarise_all(map_chr(unique(.)))
split(mtcars, mtcars$cyl)
by_cyl %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map(coef) %>%
map_dbl(2)
shiny::runApp()
?data
data()
data("USPersonalExpenditure")
USPersonalExpenditure
x <- data("USPersonalExpenditure")
x
View(mtcars)
??shiny
?shinyApp
?shinyApp
shiny::runApp()
runApp()
runApp()
?DiagrammeR
install.packages("svgPanZoom")
shiny::runApp()
runApp()
runApp()
ev <- eventdataR::patients
ev
runApp()
runApp()
as_date(ev$time)
ev
runApp()
unique(ev$registration_type)
ev %>% filter_activity() %>% unique()
ev %>% filter_activity(is.null() == FALSE) %>% unique()
typeof(ev)
View(ev)
unique(ev$handling)
runApp()
ev
runApp()
runApp()
runApp()
runApp()
?precedence_matrix
runApp()
?trace_explorer
?dotchart
?dotplot
?dotted_chart
?resource_map
?resource_matrix
runApp()
runApp()
?tags
runApp()
runApp()
eventdataR::sepsis
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
Sys.unsetenv("http_proxy")
??install.packages()
ap <- available.packages()
View(ap)
?available.packages
?pkgDep
??pkgDep
library(tools)
library(readr)
library(tools)
# get license dependencies
tags <- c(
"shiny",
"shinydashboard",
"bupaR",
"eventdataR",
"xesreadR",
"edeaR",
"processmapR",
"processmonitR",
"dplyr",
"stringr",
"readr",
"lubridate",
"DiagrammeR",
)
d <- package.dependencies(tags, depLevel = "Depends")
library(readr)
library(tools)
# get license dependencies
tags <- c(
"shiny",
"shinydashboard",
"bupaR",
"eventdataR",
"xesreadR",
"edeaR",
"processmapR",
"processmonitR",
"dplyr",
"stringr",
"readr",
"lubridate",
"DiagrammeR",
)
d <- package_dependencies(tags, depLevel = "Depends")
?package_dependencies
library(readr)
library(tools)
# get license dependencies
tags <- c(
"shiny",
"shinydashboard",
"bupaR",
"eventdataR",
"xesreadR",
"edeaR",
"processmapR",
"processmonitR",
"dplyr",
"stringr",
"readr",
"lubridate",
"DiagrammeR",
)
d <- package_dependencies(packages = tags, which = c("Depends"))
View(d)
